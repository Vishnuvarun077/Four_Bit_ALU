$date
	Tue Oct 24 11:40:36 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module alu_tb $end
$var wire 1 ! carry_sub $end
$var wire 1 " carry_add $end
$var wire 4 # Y_sub [3:0] $end
$var wire 4 $ Y_and [3:0] $end
$var wire 4 % Y_add [3:0] $end
$var wire 1 & ALB $end
$var wire 1 ' AGB $end
$var wire 1 ( AEB $end
$var reg 4 ) A [3:0] $end
$var reg 4 * B [3:0] $end
$var reg 2 + S [1:0] $end
$scope module UUT $end
$var wire 4 , A [3:0] $end
$var wire 4 - B [3:0] $end
$var wire 2 . S [1:0] $end
$var wire 1 ! carry_sub $end
$var wire 1 " carry_add $end
$var wire 4 / Y_sub [3:0] $end
$var wire 4 0 Y_and [3:0] $end
$var wire 4 1 Y_add [3:0] $end
$var wire 4 2 MuxSelect [3:0] $end
$var wire 4 3 B_sub [3:0] $end
$var wire 4 4 B_comp [3:0] $end
$var wire 4 5 B_and [3:0] $end
$var wire 4 6 B_add [3:0] $end
$var wire 4 7 A_sub [3:0] $end
$var wire 4 8 A_comp [3:0] $end
$var wire 4 9 A_and [3:0] $end
$var wire 4 : A_add [3:0] $end
$var wire 1 & ALB $end
$var wire 1 ' AGB $end
$var wire 1 ( AEB $end
$scope module Add $end
$var wire 1 ; M $end
$var wire 1 < W0 $end
$var wire 1 = W1 $end
$var wire 1 > W2 $end
$var wire 1 ? W3 $end
$var wire 1 " cout $end
$var wire 4 @ S [3:0] $end
$var wire 1 A C2 $end
$var wire 1 B C1 $end
$var wire 1 C C0 $end
$var wire 4 D B [3:0] $end
$var wire 4 E A [3:0] $end
$scope module fulladderblock1 $end
$var wire 1 < A $end
$var wire 1 F B $end
$var wire 1 ; Cin $end
$var wire 1 C Cout $end
$var wire 1 G D0 $end
$var wire 1 H D1 $end
$var wire 1 I D2 $end
$var wire 1 J S $end
$upscope $end
$scope module fulladderblock2 $end
$var wire 1 = A $end
$var wire 1 K B $end
$var wire 1 C Cin $end
$var wire 1 B Cout $end
$var wire 1 L D0 $end
$var wire 1 M D1 $end
$var wire 1 N D2 $end
$var wire 1 O S $end
$upscope $end
$scope module fulladderblock3 $end
$var wire 1 > A $end
$var wire 1 P B $end
$var wire 1 B Cin $end
$var wire 1 A Cout $end
$var wire 1 Q D0 $end
$var wire 1 R D1 $end
$var wire 1 S D2 $end
$var wire 1 T S $end
$upscope $end
$scope module fulladderblock4 $end
$var wire 1 ? A $end
$var wire 1 U B $end
$var wire 1 A Cin $end
$var wire 1 " Cout $end
$var wire 1 V D0 $end
$var wire 1 W D1 $end
$var wire 1 X D2 $end
$var wire 1 Y S $end
$upscope $end
$upscope $end
$scope module And $end
$var wire 4 Z Y [3:0] $end
$var wire 4 [ B [3:0] $end
$var wire 4 \ AndResult [3:0] $end
$var wire 4 ] A [3:0] $end
$upscope $end
$scope module Comparator $end
$var wire 1 ( AEB $end
$var wire 1 ' AGB $end
$var wire 1 & ALB $end
$var wire 1 ^ D0 $end
$var wire 1 _ D1 $end
$var wire 1 ` D2 $end
$var wire 1 a D3 $end
$var wire 1 b D4 $end
$var wire 1 c D5 $end
$var wire 1 d D6 $end
$var wire 1 e D7 $end
$var wire 4 f B [3:0] $end
$var wire 4 g A [3:0] $end
$upscope $end
$scope module Decoder $end
$var wire 1 h A0 $end
$var wire 1 i A1 $end
$var wire 1 j D0 $end
$var wire 1 k D1 $end
$var wire 1 l D2 $end
$var wire 1 m D3 $end
$upscope $end
$scope module EnableAdd $end
$var wire 4 n A [3:0] $end
$var wire 4 o B [3:0] $end
$var wire 1 p E $end
$var wire 4 q D [3:0] $end
$var wire 4 r C [3:0] $end
$upscope $end
$scope module EnableAnd $end
$var wire 4 s A [3:0] $end
$var wire 4 t B [3:0] $end
$var wire 1 u E $end
$var wire 4 v D [3:0] $end
$var wire 4 w C [3:0] $end
$upscope $end
$scope module EnableComp $end
$var wire 4 x A [3:0] $end
$var wire 4 y B [3:0] $end
$var wire 1 z E $end
$var wire 4 { D [3:0] $end
$var wire 4 | C [3:0] $end
$upscope $end
$scope module EnableSub $end
$var wire 4 } A [3:0] $end
$var wire 4 ~ B [3:0] $end
$var wire 1 !" E $end
$var wire 4 "" D [3:0] $end
$var wire 4 #" C [3:0] $end
$upscope $end
$scope module Sub $end
$var wire 4 $" A [3:0] $end
$var wire 4 %" B [3:0] $end
$var wire 1 &" M $end
$var wire 1 '" W0 $end
$var wire 1 (" W1 $end
$var wire 1 )" W2 $end
$var wire 1 *" W3 $end
$var wire 1 ! cout $end
$var wire 4 +" S [3:0] $end
$var wire 1 ," C2 $end
$var wire 1 -" C1 $end
$var wire 1 ." C0 $end
$scope module fulladderblock1 $end
$var wire 1 '" A $end
$var wire 1 /" B $end
$var wire 1 &" Cin $end
$var wire 1 ." Cout $end
$var wire 1 0" D0 $end
$var wire 1 1" D1 $end
$var wire 1 2" D2 $end
$var wire 1 3" S $end
$upscope $end
$scope module fulladderblock2 $end
$var wire 1 (" A $end
$var wire 1 4" B $end
$var wire 1 ." Cin $end
$var wire 1 -" Cout $end
$var wire 1 5" D0 $end
$var wire 1 6" D1 $end
$var wire 1 7" D2 $end
$var wire 1 8" S $end
$upscope $end
$scope module fulladderblock3 $end
$var wire 1 )" A $end
$var wire 1 9" B $end
$var wire 1 -" Cin $end
$var wire 1 ," Cout $end
$var wire 1 :" D0 $end
$var wire 1 ;" D1 $end
$var wire 1 <" D2 $end
$var wire 1 =" S $end
$upscope $end
$scope module fulladderblock4 $end
$var wire 1 *" A $end
$var wire 1 >" B $end
$var wire 1 ," Cin $end
$var wire 1 ! Cout $end
$var wire 1 ?" D0 $end
$var wire 1 @" D1 $end
$var wire 1 A" D2 $end
$var wire 1 B" S $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
07"
06"
05"
04"
03"
02"
01"
00"
0/"
0."
0-"
0,"
b0 +"
0*"
0)"
0("
0'"
0&"
b0 %"
b0 $"
b0 #"
b0 ""
0!"
b1 ~
b0 }
b0 |
b0 {
0z
b1 y
b0 x
b0 w
b0 v
0u
b1 t
b0 s
b0 r
b1 q
1p
b1 o
b0 n
0m
0l
0k
1j
0i
0h
b0 g
b0 f
0e
0d
0c
0b
1a
1`
1_
1^
b0 ]
b0 \
b0 [
b0 Z
1Y
0X
0W
1V
0U
1T
0S
0R
1Q
0P
1O
0N
0M
1L
0K
1J
0I
0H
0G
0F
b0 E
b1 D
0C
0B
0A
b1111 @
1?
1>
1=
0<
1;
b0 :
b0 9
b0 8
b0 7
b1 6
b0 5
b0 4
b0 3
b1 2
b1111 1
b0 0
b0 /
b0 .
b1 -
b0 ,
b0 +
b1 *
b0 )
1(
0'
0&
b1111 %
b0 $
b0 #
0"
0!
$end
#10
1!
1A"
1,"
1<"
0Y
1-"
17"
0=
0>
1."
0V
12"
08"
0="
0B"
0O
0B
0T
0A
0?
b0 %
b0 1
b0 @
0J
14"
19"
10"
15"
1:"
1?"
0L
0M
0Q
0R
0p
0;
b110 7
b110 #"
b110 $"
b110 3
b110 ""
b110 %"
1'"
0("
0)"
1*"
b0 #
b0 /
b0 +"
03"
0K
0P
0j
1!"
1&"
b0 6
b0 D
b0 q
b0 :
b0 E
b0 r
b10 2
1k
1h
b110 *
b110 -
b110 o
b110 t
b110 y
b110 ~
b110 )
b110 ,
b110 n
b110 s
b110 x
b110 }
b1 +
b1 .
#20
0,"
0!
1'
0(
0<"
0B"
0A"
0-"
0a
0`
0c
0_
1b
0^
00"
05"
0:"
0?"
08"
07"
04"
09"
0."
b1111 8
b1111 g
b1111 |
0'"
0*"
b0 #
b0 /
b0 +"
03"
02"
1z
0/"
0>"
0!"
0&"
1l
b0 3
b0 ""
b0 %"
b0 7
b0 #"
b0 $"
b100 2
0k
0h
1i
b0 *
b0 -
b0 o
b0 t
b0 y
b0 ~
b1111 )
b1111 ,
b1111 n
b1111 s
b1111 x
b1111 }
b10 +
b10 .
#30
0'
b1010 $
b1010 0
b1010 Z
b1010 \
0b
1(
1`
1^
1a
1_
0z
b1010 9
b1010 ]
b1010 w
b1010 5
b1010 [
b1010 v
0l
1u
b0 4
b0 f
b0 {
b0 8
b0 g
b0 |
b1000 2
1m
1h
b1010 *
b1010 -
b1010 o
b1010 t
b1010 y
b1010 ~
b1010 )
b1010 ,
b1010 n
b1010 s
b1010 x
b1010 }
b11 +
b11 .
#40
