$date
	Thu Oct 12 01:12:33 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module alu_tb $end
$var wire 1 ! AEB $end
$var wire 1 " AGB $end
$var wire 1 # ALB $end
$var wire 5 $ Y [4:0] $end
$var reg 4 % A [3:0] $end
$var reg 4 & B [3:0] $end
$var reg 2 ' S [1:0] $end
$var reg 1 ( clk $end
$var reg 1 ) enable $end
$scope module uut $end
$var wire 4 * A [3:0] $end
$var wire 1 ! AEB $end
$var wire 1 " AGB $end
$var wire 1 # ALB $end
$var wire 4 + B [3:0] $end
$var wire 2 , S [1:0] $end
$var wire 1 - SubEnable $end
$var wire 1 ) enable $end
$var wire 4 . MuxSelect [3:0] $end
$var wire 4 / B_en [3:0] $end
$var wire 4 0 AndResult [3:0] $end
$var wire 5 1 AddSubResult [4:0] $end
$var wire 4 2 A_en [3:0] $end
$var wire 1 3 ALB_internal $end
$var wire 1 4 AGB_internal $end
$var wire 1 5 AEB_internal $end
$var reg 5 6 Y [4:0] $end
$scope module AddSub $end
$var wire 1 7 A0 $end
$var wire 1 8 A1 $end
$var wire 1 9 A2 $end
$var wire 1 : A3 $end
$var wire 1 ; B0 $end
$var wire 1 < B1 $end
$var wire 1 = B2 $end
$var wire 1 > B3 $end
$var wire 1 - M $end
$var wire 1 ? W0 $end
$var wire 1 @ W1 $end
$var wire 1 A W2 $end
$var wire 1 B W3 $end
$var wire 1 C cout $end
$var wire 1 D W6 $end
$var wire 1 E W5 $end
$var wire 1 F W4 $end
$var wire 1 G S3 $end
$var wire 1 H S2 $end
$var wire 1 I S1 $end
$var wire 1 J S0 $end
$scope module fulladderblock1 $end
$var wire 1 ? A $end
$var wire 1 7 B $end
$var wire 1 - Cin $end
$var wire 1 F Cout $end
$var wire 1 K D0 $end
$var wire 1 L D1 $end
$var wire 1 M D2 $end
$var wire 1 J S $end
$upscope $end
$scope module fulladderblock2 $end
$var wire 1 @ A $end
$var wire 1 8 B $end
$var wire 1 F Cin $end
$var wire 1 E Cout $end
$var wire 1 N D0 $end
$var wire 1 O D1 $end
$var wire 1 P D2 $end
$var wire 1 I S $end
$upscope $end
$scope module fulladderblock3 $end
$var wire 1 A A $end
$var wire 1 9 B $end
$var wire 1 E Cin $end
$var wire 1 D Cout $end
$var wire 1 Q D0 $end
$var wire 1 R D1 $end
$var wire 1 S D2 $end
$var wire 1 H S $end
$upscope $end
$scope module fulladderblock4 $end
$var wire 1 B A $end
$var wire 1 : B $end
$var wire 1 D Cin $end
$var wire 1 C Cout $end
$var wire 1 T D0 $end
$var wire 1 U D1 $end
$var wire 1 V D2 $end
$var wire 1 G S $end
$upscope $end
$upscope $end
$scope module And $end
$var wire 4 W A [3:0] $end
$var wire 4 X B [3:0] $end
$var wire 4 Y Y [3:0] $end
$var wire 4 Z AndResult [3:0] $end
$upscope $end
$scope module Comparator $end
$var wire 4 [ A [3:0] $end
$var wire 1 5 AEB $end
$var wire 1 4 AGB $end
$var wire 1 3 ALB $end
$var wire 4 \ B [3:0] $end
$var wire 1 ] D0 $end
$var wire 1 ^ D1 $end
$var wire 1 _ D2 $end
$var wire 1 ` D3 $end
$var wire 1 a D4 $end
$var wire 1 b D5 $end
$var wire 1 c D6 $end
$var wire 1 d D7 $end
$upscope $end
$scope module Decoder $end
$var wire 1 e A0 $end
$var wire 1 f A1 $end
$var wire 1 g D0 $end
$var wire 1 h D1 $end
$var wire 1 i D2 $end
$var wire 1 j D3 $end
$upscope $end
$scope module Enable $end
$var wire 1 k A0 $end
$var wire 1 l A1 $end
$var wire 1 m A2 $end
$var wire 1 n A3 $end
$var wire 1 o B0 $end
$var wire 1 p B1 $end
$var wire 1 q B2 $end
$var wire 1 r B3 $end
$var wire 1 s C0 $end
$var wire 1 t C1 $end
$var wire 1 u C2 $end
$var wire 1 v C3 $end
$var wire 1 w D0 $end
$var wire 1 x D1 $end
$var wire 1 y D2 $end
$var wire 1 z D3 $end
$var wire 1 ) E $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0z
0y
1x
1w
1v
1u
0t
0s
0r
0q
1p
1o
1n
1m
0l
0k
0j
0i
0h
1g
0f
0e
0d
0c
0b
1a
0`
0_
0^
0]
b11 \
b1100 [
b0 Z
b0 Y
b11 X
b1100 W
xV
xU
xT
xS
xR
xQ
0P
xO
xN
0M
xL
xK
xJ
xI
xH
xG
xF
xE
xD
xC
xB
xA
x@
x?
0>
0=
1<
1;
1:
19
08
07
bx 6
05
14
03
b1100 2
bx 1
b0 0
b11 /
b1 .
z-
b0 ,
b11 +
b1100 *
1)
0(
b0 '
b11 &
b1100 %
bx $
z#
z"
z!
$end
#2000
1(
#4000
0(
#5000
1(
#6000
0(
#8000
1(
#10000
0g
b1000 $
b1000 6
b10 .
1h
1e
1(
b1 '
b1 ,
#12000
0(
#14000
1(
#15000
0(
#16000
1(
#18000
0(
#20000
b0zzzz $
b0zzzz 6
1i
b100 .
0h
0e
1f
0(
b10 '
b10 ,
#22000
1(
#24000
0(
#25000
1(
#26000
0(
#28000
1(
#30000
0i
b1000 .
1j
1e
1(
b11 '
b11 ,
#32000
0(
#34000
1(
#35000
0(
#36000
1(
#38000
0(
#40000
0(
